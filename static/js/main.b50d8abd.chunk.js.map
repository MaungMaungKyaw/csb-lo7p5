{"version":3,"sources":["app/Navbar.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","api/client.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","fetchPosts","createAsyncThunk","posts","addNewPost","initialPost","postsSlice","createSlice","initialState","status","error","reducers","reactionAdded","action","payload","postId","reaction","existingPost","reactions","postUpdated","content","extraReducers","pending","fulfilled","concat","rejected","push","actions","postAdded","selectAllPosts","selectPostById","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","key","type","onClick","PostExcerpt","substring","PostsList","postStatus","useEffect","slice","sort","b","localeCompare","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","resultAction","unwrapResult","console","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","SinglePostPage","App","seedDate","exact","path","render","Fragment","component","fetchUsers","usersSlice","configureStore","reducer","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","nanoid","between","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b50d8abd.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector((state) =>\n    state.users.find((user) => user.id === userId)\n  )\n\n  return <span>by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react'\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo = ''\n  if (timestamp) {\n    const date = parseISO(timestamp)\n    const timePeriod = formatDistanceToNow(date)\n    timeAgo = `${timePeriod} ago`\n  }\n\n  return (\n    <span title={timestamp}>\n      &nbsp; <i>{timeAgo}</i>\n    </span>\n  )\n}\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.posts\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', { post: initialPost })\n    return response.post\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = 'loading'\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = 'succeeded'\n      // Add any fetched posts to the array\n      state.posts = state.posts.concat(action.payload)\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.payload\n    },\n    [addNewPost.fulfilled]: (state, action) => {\n      state.posts.push(action.payload)\n    },\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state) => state.posts.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId)\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀',\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() =>\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\n        }\n      >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectAllPosts, fetchPosts } from './postsSlice'\n\nconst PostExcerpt = ({ post }) => {\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  const dispatch = useDispatch()\n  const posts = useSelector(selectAllPosts)\n\n  const postStatus = useSelector((state) => state.posts.status)\n  const error = useSelector((state) => state.posts.error)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  let content\n\n  if (postStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (postStatus === 'succeeded') {\n    // Sort posts in reverse chronological order by datetime string\n    const orderedPosts = posts\n      .slice()\n      .sort((a, b) => b.date.localeCompare(a.date))\n\n    content = orderedPosts.map((post) => (\n      <PostExcerpt key={post.id} post={post} />\n    ))\n  } else if (postStatus === 'error') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nimport { addNewPost } from \"./postsSlice\";\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n\n  const dispatch = useDispatch();\n  const users = useSelector((state) => state.users);\n\n  const onTitleChanged = (e) => setTitle(e.target.value);\n  const onContentChanged = (e) => setContent(e.target.value);\n  const onAuthorChanged = (e) => setUserId(e.target.value);\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus(\"pending\");\n        const resultAction = await dispatch(\n          addNewPost({ title, content, user: userId })\n        );\n        unwrapResult(resultAction);\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n      } catch (err) {\n        console.error(\"Failed to save the post: \", err);\n      } finally {\n        setAddRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  const usersOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ));\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  );\n};\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  const [title, setTitle] = useState(post.title)\n  const [content, setContent] = useState(post.content)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postUpdated({ id: postId, title, content }))\n      history.push(`/posts/${postId}`)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked}>\n        Save Post\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        <Link to={`/editPost/${post.id}`} className=\"button\">\n          Edit Post\n        </Link>\n      </article>\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst initialState = []\n\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.users\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled]: (state, action) => {\n      return action.payload\n    },\n  },\n})\n\nexport default usersSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { fetchUsers } from './features/users/usersSlice'\n\nimport './api/server'\n\nstore.dispatch(fetchUsers())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}